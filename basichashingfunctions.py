# -*- coding: utf-8 -*-
"""BasicHashingFunctions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/jsmcguire11/02544640cde242356eeaef146930bcc0/basichashingfunctions.ipynb

**IMPORT NECESSARY FILES**
"""

from sympy import mod_inverse
import hashlib
import os

"""**EXAMPLE #1 - Basic code to turn a text string into a hash**"""

m = hashlib.sha256(b"Hi Fintech!").hexdigest()
print(m)

"""**EXAMPLE #2 - Proof that same text string creates same hash**"""

m2 = hashlib.sha256(b"Cesare Fracassi").hexdigest()
print(m2)

m3 = hashlib.sha256(b"Cesare Fracassi").hexdigest()
print(m3)

"""**EXAMPLE #3 - Proof that even slight difference in text string creates very different hash**"""

m4 = hashlib.sha256(b"Cesar Fracassi").hexdigest()
print(m4)

"""**EXAMPLE #4 - You can make a hash of your hash (double hashing)**"""

m5 = hashlib.sha256(m3.encode()).hexdigest()
print(m5)

"""**EXAMPLE #5 - Hashing the word "Password"**"""

psw_hash = hashlib.sha256(b"password").hexdigest()
print(psw_hash)

"""**PRACTICE EXERCISE - How long would it take to find the hashes of all 4-digit numeric passwords**

**Step 1 - Create the password vector of all possible 4-digit combinations (this example only displays first 5 possibilities)**
"""

password=[str(item).zfill(4) for item in list(range(10000))]
print(*password[0:5], sep = "\n")

"""**Step 2 - Hash the password vector using SHA256 (this example only displays first 5 possibilities)**"""

hash = [hashlib.sha256(bytes(item,"utf-8")).hexdigest() for item in password]
print(*hash[0:5], sep = "\n")

"""**Step 3 - To make it difficult to use a "rainbox table" to match a hash to one of the 4-digit numberic passwords, "salt" the passwords before hashing**"""

password_salted = [item + " BofA_salt" for item in password]
print(*password_salted[0:5], sep = "\n")

"""**Step 4 - Then hash the salted passwords with SHA256**"""

hash_salted = [hashlib.sha256(bytes(item,"utf-8")).hexdigest() for item in password_salted]
print(*hash_salted[0:5], sep = "\n")