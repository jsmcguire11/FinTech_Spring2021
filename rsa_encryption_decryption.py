# -*- coding: utf-8 -*-
"""RSA_Encryption_Decryption

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16itfXbImUcC2NUwlhr2ZIdEtKPBP0SXt

**STEP 0 = Import Packages**
"""

from sympy import mod_inverse
import hashlib
import os

"""***EXAMPLE #1 = SIMPLE EXAMPLE USING PIN***

**STEP 1 = Pick three pime numbers (P, Q and E), where E < (P x Q)**
"""

p = 83

q = 229

e = 7

n = p*q

"""**STEP 2 = Establish the Public Keys (N, E)**"""

print("The public keys are n = %s and e = %s" %(n,e))

"""**STEP 3 = Compute Private Key (D)**"""

d=mod_inverse(e, (p-1)*(q-1))

print("The private key d is = %s" %d)

"""**STEP 4 = Encrpyt the Plaintext Message (M) to the Encrpted Message (C)** #this example is a PIN"""

m=1045

c=pow(m,e,n)

print("The encrypted message is %s"%c)

"""**STEP 4 = Decrpyt the Message from C to M2**"""

m2=pow(c,d,n)
print("The decrpyted message is %s" %m2)

"""**STEP 5 = Sign a Signature Message (M3) using (S)**"""

m3=9786

s=pow(m3,d,n)

print("The signature message is %s.  The signature is %s" %(m3,s))

"""**PART 5 = Verify the Decrpyted Signature Message (M4) matches the original Signature Message (M3)**"""

m4=pow(s,e,n)
print("The verified signature message is %s.  The original signature message was %s" %(m4,m3))

"""***EXAMPLE #2 = REAL WORLD EXAMPLE***

**STEP 1 = Pick three pime numbers (P, Q and E), where E < (P x Q)**
"""

p = 976522637021306403150551933319006137720124048624544172072735055780411834104862667155922841

q = 669483106578092405936560831017556154622901950048903016651289

e = 4093082899

n = p*q
print(n)

"""**STEP 2 = Establish the Public Keys (N, E)**"""

print("The public keys are n = %s and e = %s" %(n,e))

"""**STEP 3 = Compute Private Key (D)**"""

d=mod_inverse(e, (p-1)*(q-1))

print("The private key d is = %s" %d)

"""**STEP 4 = Convert Plaintext Message (message) into a Number (M)**"""

message="Shimon transfers one bitcoin to Cesare"
print(message)

m = int.from_bytes(message.encode('utf-8'), "big")
print(m)

"""**STEP 5 = Encrpyt the Plaintext Message as a Number (M) to the Encrpted Message (C)** #this example is a PIN"""

c=pow(m,e,n)

print("The encrypted message is %s"%c)

"""**STEP 6 = Decrpyt the Message from C to Bytes, then from Byes (m3_bytes) to Plaintext (message3)**"""

m3=pow(c,d,n)
m3_bytes = m3.to_bytes((m3.bit_length() + 7) // 8, 'big')

message3 = m3_bytes.decode()
print(message3)